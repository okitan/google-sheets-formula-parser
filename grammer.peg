start 
  = expr

expr
  = comparison_expr

comparison_expr
  = head:additive_expr tails:(SP? COMPARISON_OPERATOR SP? additive_expr)* {
      return objects.buildUnaryExpression({ literal: text(), head, tails });
  }

additive_expr
  = head:multiplicative_expr tails:(SP? ADDITIVE_OPERATOR SP? multiplicative_expr)* {
      return objects.buildUnaryExpression({ literal: text(), head, tails })
    } 

multiplicative_expr
  = head:primary_expr tails:(SP? MULTIPLICATIVE_OPERATOR SP? primary_expr)* {
      return objects.buildUnaryExpression({ literal: text(), head, tails })
    }

primary_expr
  = function_expr
  / matrix_expr
  / LPAREN SP? e:expr SP? RPAREN { return { ...e, literal: text() }; }
  / elem

// a1 should be treated first because it involves number
// if named_range is treated first, some a1_notation is considered as named_range
elem 
  = a1_notation / number / string / boolean / symbol

//----
// General
//----
SP
  = [' '\t\r\n]+

LPAREN
  = "("

RPAREN
  = ")"

//----
// Operators
//----

OPERATOR
  = ADDITIVE_OPERATOR

ADDITIVE_OPERATOR
  = PLUS / MINUS / AMBASSADOR

MULTIPLICATIVE_OPERATOR
  = MULTIPLY / DIVIDE

COMPARISON_OPERATOR
  = NOT_EQUAL / LAGER_EQUAL / LESS_EQUAL / EQUAL / LARGER / LESS

MULTIPLY
  = "*"

DIVIDE
  = "/"

AMBASSADOR
  = "&"

EQUAL
  = "="

LARGER
  = ">"

LAGER_EQUAL
  = ">="

LESS
  = "<"

LESS_EQUAL
  = "<="

NOT_EQUAL
  = "<>"

//----
// Number
//----

number
  = float / integer

// Number core
DIGIT
  = ZERO / NONZERO_DIGIT

ZERO
  = "0"

NONZERO_DIGIT
  = [1-9]

PLUS
  = "+"

MINUS
  = "-"

DECIMAL_POINT
  = "."

// integer
integer
  = s:SIGN i:signed_integer  {
    const negative = s.filter((e) => e === "-").length % 2 === 1;
    return objects.Number({ 
      literal: text(),
      value: i.value * (negative ? -1 : 1),
      negative
    })
  }

SIGN
  = (PLUS / MINUS)*

signed_integer
  = (ZERO  / (NONZERO_DIGIT DIGIT*)) { return objects.parseAsNumber(text()) }

// float
float
  = i:integer f:frac {
    return objects.Number({
      literal: text(),
      value: i.value + f.value * (i.negative ? -1 : 1)
    });
  } 

frac
  = DECIMAL_POINT DIGIT+ { return objects.parseAsNumber(`0${text()}`) }

//----
// string
//----

ALPHA 
  = LOWER_ALPHA / UPPER_ALPHA
LOWER_ALPHA 
  = [a-z]
UPPER_ALPHA 
  = [A-Z]

ALNUM = ALPHA / DIGIT

DOUBLE_QUOTE 
  = '"'

// string
// "" means " in DOUBLE_QUOTE
CHAR_FOR_STRING 
  = [^"] 
  / DOUBLE_QUOTE DOUBLE_QUOTE { return `"` }

string 
  = DOUBLE_QUOTE s:CHAR_FOR_STRING* DOUBLE_QUOTE {
    return objects.String({ literal: text(), value: s.join("") })
  }

//---
// logical
//---

boolean
  = TRUE / FALSE 

TRUE
  = ("TRUE" / "true") { return objects.Boolean({ literal: text(), value: true }) }

FALSE
  = ("FALSE" / "false") { return objects.Boolean({ literal: text(), value: false }) }

//----
// cell or range
//----

SINGLE_QUOTE
  = "'"

// '' means ' in SINGLE_QUOTE
CHAR_IN_SINGLE_QUOTE
   = [^']
   / SINGLE_QUOTE SINGLE_QUOTE { return `'` }

// range involves cell
a1_notation 
  = range / cell

DELIMITER
  = ":"

DOLLAR
  = "$"

COLUMN
  = d:DOLLAR? c:[A-Z]+ { return { index: objects.columnToIndex(c.join("")), fixed: Boolean(d) }; }

EXCLAMATION_MARK
  = "!"

ROW
  = d:DOLLAR? r:(NONZERO_DIGIT DIGIT*) { return { index: parseInt(r.join(""), 10) - 1, fixed: Boolean(d) }; }

sheet_name
  = SINGLE_QUOTE s:CHAR_IN_SINGLE_QUOTE+ SINGLE_QUOTE { return s.join(""); }

sheet_name_suffix
   = s:sheet_name EXCLAMATION_MARK { return s; }
   / s:ALNUM+ EXCLAMATION_MARK { return s.join(""); }

cell
  = s:sheet_name_suffix? c:COLUMN r:ROW {
    return objects.buildNotation({ literal: text(), sheetName: s, startColumn: c, startRow: r });
  }

range
  = s:sheet_name_suffix? c1:COLUMN r1:ROW? DELIMITER c2:COLUMN r2:ROW? {
    return objects.buildNotation({ literal: text(), sheetName: s, startColumn: c1, startRow: r1, endColumn: c2, endRow: r2 })
  }
  / s:sheet_name_suffix? c1:COLUMN? r1:ROW DELIMITER c2:COLUMN? r2:ROW {
    return objects.buildNotation({ literal: text(), sheetName: s, startColumn: c1, startRow: r1, endColumn: c2, endRow: r2 })
  }

//----
// Matrix
//----

COMMNA
  = ","

SEMI_COLON
  = ";"

LBRACE
  = "{"

RBRACE
  = "}"

matrix_expr
  = LBRACE SP? head:matrix_row? tails:(SP? SEMI_COLON SP? matrix_row)* SP? RBRACE {
    return objects.buildMatrix({ literal: text(), head, tails });
  }

matrix_row
  = head:matrix_item tails:(SP? COMMNA SP? matrix_item)* {
    return objects.buildArray({ head, tails });
  }
  / LBRACE SP? head:matrix_item tails:(SP? COMMNA SP? matrix_item)* SP? RBRACE {
    return objects.buildRow({ literal: text(), head, tails })
  }

matrix_item
  = additive_expr
  / LBRACE SP? e:additive_expr SP? RBRACE { return objects.buildRow({ literal: text(), head: e, tails: [] }) }


//----
// Symbol
//----

symbol_name
  = (ALNUM / [\u0080-\uFFFF])+ { return text() }

function_expr
  = f:symbol_name LPAREN SP? head:expr? tails:(SP? COMMNA SP? expr?)* SP? RPAREN { 
    return objects.buildFunction({ literal: text(), name: f, head, tails });
  }

symbol
  = symbol_name { return objects.Symbol({ literal: text(), value: text() }) }

