start 
  = unary_expr / elem

unary_expr
  = head:elem SP? tails:(OPERATOR SP? elem)+ {
    return objects.buildUnaryExpression({ literal: text(), head, tails })
  }

elem 
  = number

//----
// General
//----
SP
  = [' '\t\r\n]+

//----
// Operator
//----

OPERATOR
  = PLUS / MINUS

//----
// Number
//----

number
  = float / integer

// Number core
DIGIT
  = [0-9]

ZERO
  = "0"

NONZERODIGIT
  = [1-9]

PLUS
  = "+"

MINUS
  = "-"

DECIMAL_POINT
  = "."

// integer
integer
  = (PLUS / MINUS)* signed_integer  { return new objects.Number(text()) }

signed_integer "signed_integer"
  = ZERO / (NONZERODIGIT DIGIT*)

// float
frac
  = DECIMAL_POINT DIGIT+

float
  = integer frac { return new objects.Number(text()) } 